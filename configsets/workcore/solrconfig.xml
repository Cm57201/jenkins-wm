<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is a stripped down config file used for a simple example...  
 It is *not* a good example to work from. 
-->
<config>
    <luceneMatchVersion>7.1.0</luceneMatchVersion>

    <codecFactory class="solr.SchemaCodecFactory"/>

    <schemaFactory class="ManagedIndexSchemaFactory">
        <bool name="mutable">true</bool>
        <str name="managedSchemaResourceName">managed-schema</str>
    </schemaFactory>

    <!--  The DirectoryFactory to use for indexes.
          solr.StandardDirectoryFactory, the default, is filesystem based.
          solr.RAMDirectoryFactory is memory based, not persistent, and doesn't work with replication. -->
    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.StandardDirectoryFactory}" />

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Index Config - These settings control low-level behavior of indexing
     Most example settings here show the default value, but are commented
     out, to more easily see where customizations have been made.

     Note: This replaces <indexDefaults> and <mainIndex> from older versions
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <indexConfig>
        <!-- LockFactory

             This option specifies which Lucene LockFactory implementation
             to use.

             single = SingleInstanceLockFactory - suggested for a
                      read-only index or when there is no possibility of
                      another process trying to modify the index.
             native = NativeFSLockFactory - uses OS native file locking.
                      Do not use when multiple solr webapps in the same
                      JVM are attempting to share a single index.
             simple = SimpleFSLockFactory  - uses a plain file for locking

             Defaults: 'native' is default for Solr3.6 and later, otherwise
                       'simple' is the default

             More details on the nuances of each LockFactory...
             http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <lockType>${solr.lock.type:native}</lockType>

        <!-- Lucene Infostream

             To aid in advanced debugging, Lucene provides an "InfoStream"
             of detailed information when indexing.

             Setting the value to true will instruct the underlying Lucene
             IndexWriter to write its info stream to solr's log. By default,
             this is enabled here, and controlled through log4j.properties.
          -->
        <infoStream>true</infoStream>

        <!--
            Use true to enable this safety check, which can help
            reduce the risk of propagating index corruption from older segments
            into new ones, at the expense of slower merging.
        -->
    </indexConfig>


    <!-- JMX

         This example enables JMX if and only if an existing MBeanServer
         is found, use this if you want to configure JMX through JVM
         parameters. Remove this to disable exposing Solr configuration
         and statistics to JMX.

         For more details see http://wiki.apache.org/solr/SolrJmx
      -->
    <jmx/>

    <updateHandler class="solr.DirectUpdateHandler2">

		<!-- SoftAutoCommit

                 Perform a 'soft' commit automatically under certain conditions.
                 This commit avoids ensuring that data is synched to disk.

                 maxDocs - Maximum number of documents to add since the last
                           soft commit before automaticly triggering a new soft commit.

                 maxTime - Maximum amount of time in ms that is allowed to pass
                           since a document was added before automatically
                           triggering a new soft commit.
              -->

		<autoSoftCommit>
			<maxTime>${solr.autoSoftCommit.maxTime:2000}</maxTime>
		</autoSoftCommit>

        <!-- autocommit pending docs if certain criteria are met.  Future versions may expand the available
         criteria -->
        <autoCommit>
            <maxDocs>${solr.autoCommit.maxDocs:1000}</maxDocs>
            <maxTime>${solr.autoCommit.maxTime:30000}</maxTime>
        </autoCommit>

        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

    </updateHandler>

    <requestHandler name="/find" class="solr.SearchHandler" />

    <requestHandler name="/workSearch" class="solr.SearchHandler" default="true">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="defType">edismax</str>
            <str name="qf">title workNumber</str>
            <str name="q.alt">*:*</str>
            <str name="rows">20</str>
            <str name="fl">uuid,id,title,workNumber,score</str>
        </lst>
    </requestHandler>

    <query>
        <!-- Internal cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.
             When a new searcher is opened, its caches may be prepopulated
             or "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For LRUCache,
             the prepopulated items will be the most recently accessed items.
          -->
        <filterCache class="solr.FastLRUCache"
                     maxRamMB="1000"
                     autowarmCount="128"/>

        <!-- queryResultCache caches results of searches - ordered lists of
         document ids (DocList) based on a query, a sort, and the range
         of documents requested.  -->
        <queryResultCache
                class="solr.LRUCache"
                size="256"
                initialSize="256"
                autowarmCount="128"
                maxRamMB="1000"/>

        <!-- documentCache caches Lucene Document objects (the stored fields for each document).
           Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="0"/>

        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="128"
               initialSize="128"
               autowarmCount="0"
               regenerator="solr.NoOpRegenerator"/>

        <!-- An optimization that attempts to use a filter to satisfy a search.
             If the requested sort does not include a score, then the filterCache
             will be checked for a filter matching the query.  If found, the filter
             will be used as the source of document ids, and then the sort will be
             applied to that.
          -->
        <useFilterForSortedQuery>true</useFilterForSortedQuery>

        <!-- An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, of a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 50 will be collected and cached. Any further
             requests in that range can be satisfied via the cache.
        -->
        <queryResultWindowSize>50</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
            queryResultCache.
         -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- Lazy field loading will attempt to read only parts of documents on disk that are
             requested.  Enabling should be faster if you aren't retrieving all stored fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>
        <maxWarmingSearchers>4</maxWarmingSearchers>
        <maxBooleanClauses>2048</maxBooleanClauses>
        <slowQueryThresholdMillis>500</slowQueryThresholdMillis>

        <!-- Use Cold Searcher

            If a search request comes in and there is no current
            registered searcher, then immediately register the still
            warming searcher and use it.  If "false" then all requests
            will block until the first searcher is done warming.
        -->
        <useColdSearcher>true</useColdSearcher>

    </query>

    <requestDispatcher handleSelect="true">
        <!-- enable streaming here to support /mlt streaming -->
        <requestParsers enableStreamBody="true" enableRemoteStreaming="false" multipartUploadLimitInKB="2048"/>
    </requestDispatcher>

    <requestHandler name="/mlt" class="solr.MoreLikeThisHandler" />
    <requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" />

    <requestHandler name="/admin/luke" class="org.apache.solr.handler.admin.LukeRequestHandler" />

    <requestHandler name="standard" class="solr.SearchHandler" default="false"/>

    <requestHandler name="/update" class="solr.UpdateRequestHandler"/>

    <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
        <str name="healthcheckFile">server-enabled.txt</str>
    </requestHandler>
    <requestHandler name="/manage/health" class="solr.PingRequestHandler"/>


    <!-- realtime get handler, guaranteed to return the latest stored fields of
     any document, without the need to commit or open a new searcher.  The
     current implementation relies on the updateLog feature being enabled.

     ** WARNING **
     Do NOT disable the realtime get handler at /get if you are using
     SolrCloud otherwise any leader election will cause a full sync in ALL
     replicas for the shard in question. Similarly, a replica recovery will
     also always fetch the complete index from the leader because a partial
     sync will not be possible in the absence of this handler.
     -->
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
        <lst name="defaults">
            <str name="omitHeader">true</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
        </lst>
    </requestHandler>

    <!-- Spell Check

     The spell check component can return a list of alternative spelling
     suggestions.

     http://wiki.apache.org/solr/SpellCheckComponent
    -->
    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <str name="queryAnalyzerFieldType">text_general</str>

        <!-- Multiple "Spell Checkers" can be declared and used by this
             component
          -->

        <!-- a spellchecker built from a field of the main index -->
        <lst name="spellchecker">
            <str name="name">default</str>
            <str name="field">text</str>
            <str name="classname">solr.DirectSolrSpellChecker</str>
            <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
            <str name="distanceMeasure">internal</str>
            <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
            <float name="accuracy">0.5</float>
            <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
            <int name="maxEdits">2</int>
            <!-- the minimum shared prefix when enumerating terms -->
            <int name="minPrefix">1</int>
            <!-- maximum number of inspections per result. -->
            <int name="maxInspections">5</int>
            <!-- minimum length of a query term to be considered for correction -->
            <int name="minQueryLength">4</int>
            <!-- maximum threshold of documents a query term can appear to be considered for correction -->
            <float name="maxQueryFrequency">0.01</float>
            <!-- uncomment this to require suggestions to occur in 1% of the documents
                <float name="thresholdTokenFrequency">.01</float>
            -->
        </lst>

        <!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
        <lst name="spellchecker">
            <str name="name">wordbreak</str>
            <str name="classname">solr.WordBreakSolrSpellChecker</str>
            <str name="field">name</str>
            <str name="combineWords">true</str>
            <str name="breakWords">true</str>
            <int name="maxChanges">10</int>
        </lst>

        <!-- a spellchecker that uses a different distance measure -->
        <!--
           <lst name="spellchecker">
             <str name="name">jarowinkler</str>
             <str name="field">spell</str>
             <str name="classname">solr.DirectSolrSpellChecker</str>
             <str name="distanceMeasure">
               org.apache.lucene.search.spell.JaroWinklerDistance
             </str>
           </lst>
         -->

        <!-- a spellchecker that use an alternate comparator

             comparatorClass be one of:
              1. score (default)
              2. freq (Frequency first, then score)
              3. A fully qualified class name
          -->
        <!--
           <lst name="spellchecker">
             <str name="name">freq</str>
             <str name="field">lowerfilt</str>
             <str name="classname">solr.DirectSolrSpellChecker</str>
             <str name="comparatorClass">freq</str>
          -->

        <!-- A spellchecker that reads the list of words from a file -->
        <!--
           <lst name="spellchecker">
             <str name="classname">solr.FileBasedSpellChecker</str>
             <str name="name">file</str>
             <str name="sourceLocation">spellings.txt</str>
             <str name="characterEncoding">UTF-8</str>
             <str name="spellcheckIndexDir">spellcheckerFile</str>
           </lst>
          -->
    </searchComponent>

    <!-- Highlighting Component

     http://wiki.apache.org/solr/HighlightingParameters
    -->
    <highlighting>
        <!-- Configure the standard fragmenter -->
        <!-- This could most likely be commented out in the "default" case -->
        <fragmenter name="gap" class="org.apache.solr.highlight.GapFragmenter" default="true">
            <lst name="defaults">
                <int name="hl.fragsize">50</int>
            </lst>
        </fragmenter>

        <!-- Configure the standard formatter -->
        <formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
            <lst name="defaults">
                <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                <str name="hl.simple.post"><![CDATA[</em>]]></str>
            </lst>
        </formatter>
    </highlighting>

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>solr</defaultQuery>
    </admin>

</config>

