<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is a stripped down config file used for a simple example...  
 It is *not* a good example to work from. 
-->
<config>
    <luceneMatchVersion>7.1.0</luceneMatchVersion>

    <codecFactory class="solr.SchemaCodecFactory"/>


    <schemaFactory class="ManagedIndexSchemaFactory">
      <bool name="mutable">true</bool>
      <str name="managedSchemaResourceName">managed-schema</str>
    </schemaFactory>

    <!--  The DirectoryFactory to use for indexes.
          solr.StandardDirectoryFactory, the default, is filesystem based.
          solr.RAMDirectoryFactory is memory based, not persistent, and doesn't work with replication. -->
    <directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.StandardDirectoryFactory}"/>
    <unlockOnStartup>true</unlockOnStartup>


    <updateHandler class="solr.DirectUpdateHandler2">
        <autoSoftCommit>
            <maxTime>${solr.autoSoftCommit.maxTime:1000}</maxTime>
        </autoSoftCommit>

        <autoCommit>
            <maxDocs>${solr.autoCommit.maxDocs:1000}</maxDocs>
            <maxTime>${solr.autoCommit.maxTime:30000}</maxTime>
        </autoCommit>

        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

    </updateHandler>

    <requestDispatcher handleSelect="true">
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048"/>
    </requestDispatcher>

    <requestHandler name="standard" class="solr.SearchHandler" default="true">
        <lst name="defaults">
            <str name="defType">edismax</str>
            <str name="df">name</str>
            <str name="q.alt">*:*</str>
            <str name="rows">50</str>
            <str name="fl">*,score</str>
        </lst>
    </requestHandler>

    <requestHandler name="/update" class="solr.UpdateRequestHandler"/>

    <requestHandler name="/mlt" class="solr.MoreLikeThisHandler"/>

    <requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler"/>

    <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
        <str name="healthcheckFile">server-enabled.txt</str>
    </requestHandler>
    <requestHandler name="/manage/health" class="solr.PingRequestHandler"/>


    <!-- realtime get handler, guaranteed to return the latest stored fields of
     any document, without the need to commit or open a new searcher.  The
     current implementation relies on the updateLog feature being enabled.

     ** WARNING **
     Do NOT disable the realtime get handler at /get if you are using
     SolrCloud otherwise any leader election will cause a full sync in ALL
     replicas for the shard in question. Similarly, a replica recovery will
     also always fetch the complete index from the leader because a partial
     sync will not be possible in the absence of this handler.
     -->
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
        <lst name="defaults">
            <str name="omitHeader">true</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
        </lst>
    </requestHandler>

    <!-- Highlighting Component

     http://wiki.apache.org/solr/HighlightingParameters
     -->
    <highlighting>
        <!-- Configure the standard fragmenter -->
        <!-- This could most likely be commented out in the "default" case -->
        <fragmenter name="gap" class="org.apache.solr.highlight.GapFragmenter" default="true">
            <lst name="defaults">
                <int name="hl.fragsize">50</int>
            </lst>
        </fragmenter>

        <!-- Configure the standard formatter -->
        <formatter name="html" class="org.apache.solr.highlight.HtmlFormatter" default="true">
            <lst name="defaults">
                <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                <str name="hl.simple.post"><![CDATA[</em>]]></str>
            </lst>
        </formatter>
    </highlighting>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     Query section - these settings control query time things like caches
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!-- Solr Internal Query Caches

            There are two implementations of cache available for Solr,
            LRUCache, based on a synchronized LinkedHashMap, and
            FastLRUCache, based on a ConcurrentHashMap.

            FastLRUCache has faster gets and slower puts in single
            threaded operation and thus is generally faster than LRUCache
            when the hit ratio of the cache is high (> 75%), and may be
            faster under other scenarios on multi-cpu systems.
        -->

        <!-- Filter Cache

             Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.  When a
             new searcher is opened, its caches may be prepopulated or
             "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For
             LRUCache, the autowarmed items will be the most recently
             accessed items.

             Parameters:
               class - the SolrCache implementation LRUCache or
                   (LRUCache or FastLRUCache)
               size - the maximum number of entries in the cache
               initialSize - the initial capacity (number of entries) of
                   the cache.  (see java.util.HashMap)
               autowarmCount - the number of entries to prepopulate from
                   and old cache.
          -->
        <filterCache class="solr.FastLRUCache"
                     maxRamMB="64"
                     autowarmCount="100"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
          -->
        <queryResultCache class="solr.LRUCache"
                          size="128"
                          initialSize="128"
                          autowarmCount="64"
                          maxRamMB="128"/>

        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
          -->
        <documentCache class="solr.LRUCache"
                       size="128"
                       initialSize="128"
                       autowarmCount="0"/>

        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="10"
               initialSize="0"
               autowarmCount="0"
               regenerator="solr.NoOpRegenerator"/>


        <!-- Lazy Field Loading

             If true, stored fields that are not requested will be loaded
             lazily.  This can result in a significant speed improvement
             if the usual case is to not load all stored fields,
             especially if the skipped fields are large compressed text
             fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>


        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 49 will be collected and cached.  Any further
             requests in that range can be satisfied via the cache.
          -->
        <queryResultWindowSize>50</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- Query Related Event Listeners

             Various IndexSearcher related events can trigger Listeners to
             take actions.

             newSearcher - fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka
             registered).  It can be used to prime certain caches to
             prevent long request times for certain requests.

             firstSearcher - fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain autowarming data from.


          -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence.
          -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                   <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                   <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                  -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                <lst>
                    <str name="title">complete</str>
                </lst>
                -->
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
          -->
        <useColdSearcher>true</useColdSearcher>

        <!-- Max Warming Searchers

             Maximum number of searchers that may be warming in the
             background concurrently.  An error is returned if this limit
             is exceeded.

             Recommend values of 1-2 for read-only slaves, higher for
             masters w/o cache warming.
          -->
        <maxWarmingSearchers>4</maxWarmingSearchers>
        <slowQueryThresholdMillis>500</slowQueryThresholdMillis>
    </query>

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>solr</defaultQuery>
    </admin>

    <jmx/>

</config>

